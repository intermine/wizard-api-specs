swagger: "2.0"
info:
  description: "ISA-InterMine Data import wizard prototype spec"
  version: "0.1.0"
  title: "InterMine Import Wizard API Specs - working draft"
  contact:
    email: "info@intermine.org"
  license:
    name: "LGPL 2.1"
    url: "https://github.com/intermine/intermine/blob/dev/LICENSE"
host: "wizard.intermine.org"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /newMineConfig:
    get:
      summary: "Start new mine build config entry"
      description: "Create a new entry for a set of uploaded files and associated configs to launch a new mine. This can allocate an id which all file uploads will be associated with."
      operationId: "newMineConfig"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "New mineconfig instance created"
          schema:
            $ref: "#/definitions/MineConfig"
  /detectFileProperties:
    post:
      summary: "Return identified file type"
      description: ""
      operationId: "detectFileProperties"
      consumes:
      - "application/json"
      - "application/xml"
      - "multipart/form-data"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "File or file snippet that needs to be identified."
        required: true
        schema:
          $ref: "#/definitions/DataFile"
      responses:
        200:
          description: "successfully detected file type"
          schema:
            $ref: "#/definitions/DataFileProperties"
  /saveFileProperties:
    post:
      summary: "Save file properties to a given InterMine pre-build config"
      description: "Following on from `detectFileProperties`, we need to save a set of configs associated with a file. This can be run multiple times, as the user may upload an unknown number of files."
      operationId: "saveFileProperties"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "File or file snippet that needs to be identified."
        required: true
        schema:
            $ref: "#/definitions/DataFilePropertiesResponse"
      responses:
        200:
          description: "successfully saved provided DataFileProperties details"
  /supplementaryDataSources:
    get:
      summary: "Get list of possible supplementary data sources for this mine config"
      description: "Returns a list of possible external data sources to add to this mine, e.g. GO terms, publications, etc."
      operationId: "getSupplementaryDataSources"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SupplementaryDataSources"
    post:
      summary: "set list of desired supplementary data sources"
      description: "Saves a list of possible external data sources to add to this mine, e.g. GO terms, publications, etc."
      operationId: "setSupplementaryDataSources"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SupplementaryDataSourcesResponse"
definitions:
  DataFile:
    type: "object"
    required:
    - "name"
    - "fileContents"
    properties:
      name:
        type: "string"
        example: "humanfile.gff"
      fileContents:
        type: "string"
    xml:
      name: "DataFile"
  DataFileProperties:
    type: "object"
    required:
    - "name"
    - "fileFormat"
    - "rowCount"
    - "organism"
    - "fileID"
    - "mineID"
    properties:
      name:
        type: "string"
        example: "humanfile.gff"
      fileFormat:
        type: "string"
        example: "gff"
      rowCount:
        type: "integer"
        example: 22395
      filePreview:
        type: "object"
        properties:
          headerRow:
              type: "array"
              items:
                type: "string"
                example: ["seqID", "source", "type", "start", "end", "score", "strand", "phase"]
          rows:
            type: "array"
            items:
              type: "array"
              items:
                type: "string"
                example: ["NC_000001.11", "RefSeq", "region  1", "248956422", ".", "+", ".", "ID=id0;Dbxref=taxon:9606;Name=1;chromosome=1;gbkey=Src;genome=chromosome;mol_type=genomic DNA"]

      columnsToMap:
        type: "array"
        items:
          type: "object"
          properties:
            fileColumnName:
              type: "string"
              example: "GeneID"
            fileColumnExample:
              type: "string"
              example: "100287102"
            modelClassToMapTo:
              type: "string"
              example: "Gene"
            modelPropertyToMapTo:
              type: "array"
              items:
                type: "object" # I've added human name and computer name here.
                               # originally I thought "Can't we get it from the
                               # model? But we don't have a model yet. Or
                               # maybe there is a master lookup doc for human
                               # name to computer name mappings?
                properties:
                  humanName:
                    type: "string"
                  modelName:
                    type: "string"
                example: [{humanName:"Gene Primary Identifier", modelName:"primaryIdentifier"},{humanName: "Symbol", modelName: "symbol"}, {humanName: "Synonym", modelName:"synonym"}]
                  # also, is synonym an array? Actually that probably doesn't
                  # matter, we are only adding one property to it not
                  # creating the array

            defaultMapping:
              type: "string"
      organism:
        type: "object"
        properties:
          name:
            type: "string"
            example: "H. Sapiens"
          genomeBuild:
            type: "string"
            example: "GRCh38.p7"
          taxonID:
            type: "integer"
            example: "9606"
      fileID:
        type: "integer"
      mineID:
        type: "integer"
    xml:
      name: "DataFileProperties"
  DataFilePropertiesResponse:
    type: "object"
    required:
    - "fileID"
    - "mineID"
    properties:
      mappedColumns:
        type: "array"
        items:
          type: "object"
          properties:
            fileColumnName:
              type: "string"
              example: "GeneID"
            modelClassToMapTo:
              type: "string"
              example: "Gene" #Will this ever be nested i.e. Gene.subClass?
            modelPropertyToMapTo:
              type: "string"
              nullable: true #set to null = no mapping, whereas don't set at all == accept default?
              example: "primaryIdentifier"
      organism:
        type: "object"
        properties:
          genomeBuild: #Does genome build imply taxon? If so, remove taxon from spec below?
            type: "string"
            example: "GRCh38.p7"
          taxonID:
            type: "integer"
            example: "9606"
      fileID:
        type: "integer"
      mineID:
        type: "integer"
    xml:
      name: "DataFilePropertiesResponse"
  MineConfig:
    type: "object"
    required:
      - "id"
    properties:
      name:
        type: "string"
        example: "MyFirstMine"
      lab:
        type: "string"
        example: "AliceLab"
      mineUrl:
        type: "string"
        example: "myfirstmine.alicelab.intermine.org"
      privacy:
        type: "string"
        enum: ["private","unlisted","public"]
        example: "private"
      licence:
        type: "string"
        example: "CC0"
    xml:
      name: "MineConfig"
  SupplementaryDataSources:
    type: array
    items:
      $ref: '#/definitions/SupplementaryDataSource'
    xml:
      name: "SupplementaryDataSources"
  SupplementaryDataSource:
    type: "object"
    required:
    - "humanName"
    - "modelName"
    - "description"
    - "url"
    properties:
      humanName:
        type: "string"
        example: "GO annotations"
      modelName:
        type: "string"
        example: "GOAnnotations"
      description:
        type: "string"
        example: "A GO annotation is a statement about the function of a particular gene. "
      url:
        type: "string"
        example: "http://geneontology.org/page/go-annotations"
    xml:
      name: "SupplementaryDataSources"
  SupplementaryDataSourcesResponse:
    type: "array"
    items:
        type: "string"
    example: ["GOAnnotations", "PubMed"]
